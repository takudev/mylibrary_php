<?php

require_once dirname(__FILE__).'/Util.php';

/**
 * Test class for Util.
 * Generated by PHPUnit on 2012-10-31 at 12:55:50.
 */
class UtilTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Util
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Util;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }


    //==========================================
    // test function
    //==========================================
    /**
     * @dataProvider forTestStartsWith
     */
    public function testStartsWith($haystack, $needle, $bool)
    {
        $ret = Util::startsWith($haystack, $needle);
        $this->assertEquals($ret, $bool);
    }

    /**
     * @dataProvider forTestEndsWith
     */
    public function testEndsWith($haystack, $needle, $bool)
    {
        $ret = Util::endsWith($haystack, $needle);
        $this->assertEquals($ret, $bool);
    }

    /**
     * @dataProvider forTestMatchesIn
     */
    public function testMatchesIn($haystack, $needle, $bool)
    {
        $ret = Util::matchesIn($haystack, $needle);
        $this->assertEquals($ret, $bool);
    }

    /**
     *
     */
    public function testGetRandomCharacters(){

        $character = "a";
        $ret = Util::getRandomCharacters($character, 1);
        $this->assertEquals($ret, "a");

        $character = "a";
        $ret = Util::getRandomCharacters($character);
        $this->assertEquals($ret, "aaaaaaaa");

        $character = "abc";
        $ret = Util::getRandomCharacters($character, 8);
        $this->assertRegExp("/[abc]{8}/", $ret);
    }


    /**
     *
     */
    public function testGetRandomString(){

        // 文字種のチェック
        for($i=0; $i<100; $i++){
            $random_string = Util::getRandomString();
            $this->assertRegExp("/[a-zA-Z0-9_@]{8}/", $random_string);
        }

        // 文字数のチェック
        $random_string = Util::getRandomString(10);
        $this->assertEquals(strlen($random_string), 10, "char length not expected. random string:".$random_string);
    }


    public function testGetRandoomStringStrong8(){

        for($i=0; $i<100; $i++){
            $random_string = Util::getRandomStringStrong8();
            $other_character = '!@#$%&*()-+=<>;:';
            $pattern = '/[' . $other_character . '].*[' . $other_character . ']/';

            // 記号が2文字含まれるかをチェック
            $this->assertRegExp($pattern, $random_string);

            // 文字数のチェック
            $this->assertEquals(strlen($random_string), 8, "char length not expected. random string:".$random_string);
        }

        // 文字数のチェック
        $random_string = Util::getRandomStringStrong8(10);
        $this->assertEquals(strlen($random_string), 10, "char length not expected. random string:".$random_string);
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testGetRandoomStringStrong8Exception1(){
        Util::getRandomStringStrong8(0);
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testGetRandoomStringStrong8Exception2(){
        Util::getRandomStringStrong8(1);
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testGetRandoomStringStrong8Exception3(){
        Util::getRandomStringStrong8("a");
    }

	public function testConvertCsvStringToArray(){

		$temp_file = $this->createCSV();

		// 実行
		$result_array = Util::convertCsvStringToArray($temp_file);

		// 取得した要素数の確認
		$this->assertEquals(count($result_array), 3);
		foreach($result_array as $result_row){
			$this->assertEquals(count($result_row), 2);

		}

		// 取得した内容の確認
		$this->assertEquals($result_array[0][0], "あ");
		$this->assertEquals($result_array[0][1], "い");
		$this->assertEquals($result_array[1][0], "う");
		$this->assertEquals($result_array[1][1], "噂");
		$this->assertEquals($result_array[2][0], "え");
		$this->assertEquals($result_array[2][1], "お");

	}



    //==========================================
    // support function
    //==========================================
    function createCSV(){
		// 検証CSV作成
		$temp_file = sys_get_temp_dir() . "/" . __FUNCTION__;
		$test_str = <<< EOD
"あ","い"
"う","噂"
"え","お"
EOD;
		$test_str_sjis = mb_convert_encoding($test_str, 'sjis-win', 'utf8');
		$handle = fopen($temp_file, 'w');
		fwrite($handle, $test_str_sjis);
		fclose($handle);

		return $temp_file;
    }



    //==========================================
    // dataProvider
    //==========================================
    public function forTestStartsWith()
    {
        return array(
                array("abc", "a", true),
                array("abc", "b", false),
                array("abc", "c", false),
        );
    }

    public function forTestEndsWith()
    {
        return array(
                array("abc", "a", false),
                array("abc", "b", false),
                array("abc", "c", true),
        );
    }

    public function forTestMatchesIn()
    {
        return array(
                array("abc", "a", true),
                array("abc", "b", true),
                array("abc", "c", true),
                array("abc", "abc", true),
                array("abc", "d", false),
        );
    }
}
?>
