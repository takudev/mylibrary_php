<?php

require_once dirname(__FILE__).'/Pager.php';

/**
 * Test class for Pager.
 * Generated by PHPUnit on 2012-11-09 at 15:13:31.
 */
class PagerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Pager
     */
//     protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     *
     */
    public function testGetCurrentPageNumber()
    {
        // [@を利用している理由]
        // phpunitはWARNINGを補足するとfailとなってしまう。
        // failとなりテストが中断しないように@でWARNINGを補足しないようにする。

        //-------------------------
        // 正常系
        //-------------------------
        // デフォルト値のチェック
        @$pager = new Pager(array());
        $this->assertNull($pager->getCurrentPageNumber());

        $pager = new Pager(array("",""), 1);
        @$pager->setCurrentPageNumber(1);
        $this->assertEquals(1, $pager->getCurrentPageNumber());
        $pager->setCurrentPageNumber(2);
        $this->assertEquals(2, $pager->getCurrentPageNumber());

        //-------------------------
        // 異常系
        //-------------------------
        // 有効範囲外のページ番号を登録。setした値が無視されるか。
        $pager = new Pager(array("",""), 1);
        @$pager->setCurrentPageNumber(2); // 正常値を設定
        @$pager->setCurrentPageNumber(3); // 異常値を設定
        $this->assertEquals(2, $pager->getCurrentPageNumber());

        @$pager->setCurrentPageNumber(0); // 異常値を設定
        $this->assertEquals(2, $pager->getCurrentPageNumber());
    }

    /**
     *
     */
    public function testGetNextPageNumber()
    {
        $pager = new Pager(array("",""));
        $this->assertEquals(1, $pager->getNextPageNumber());

        $pager = new Pager(array("",""), 1);
        $this->assertEquals(2, $pager->getNextPageNumber());

        $pager = new Pager(array("",""), 1);
        $pager->setCurrentPageNumber(2);
        $this->assertEquals(2, $pager->getNextPageNumber());
    }

    /**
     *
     */
    public function testGetPrevPageNumber()
    {
        $pager = new Pager(array("",""));
        $this->assertEquals(1, $pager->getPrevPageNumber());

        $pager = new Pager(array("",""), 1);
        $pager->setCurrentPageNumber(2);
        $this->assertEquals(1, $pager->getPrevPageNumber());
    }

    /**
     *
     */
    public function testGetCurrentPageData()
    {
        $pager = new Pager(array(1,2));
        $this->assertEquals(array(1,2), $pager->getCurrentPageData());

        $pager = new Pager(array(1,2,3,4,5,6,7,8,9,10,11));
        $this->assertEquals(array(1,2,3,4,5,6,7,8,9,10), $pager->getCurrentPageData());
        $pager->setCurrentPageNumber(2);
        $this->assertEquals(array(11), $pager->getCurrentPageData());

        $pager = new Pager(array(1,2,3,4,5,6,7,8,9,10), 1);
        $pager->setCurrentPageNumber(1);
        $this->assertEquals(array(1), $pager->getCurrentPageData());
        $pager->setCurrentPageNumber(5);
        $this->assertEquals(array(5), $pager->getCurrentPageData());
        $pager->setCurrentPageNumber(10);
        $this->assertEquals(array(10), $pager->getCurrentPageData());
    }

    /**
     *
     */
    public function testGetCurrentPageStartIndex()
    {
        $pager = new Pager(array(""));
        $index = $pager->getCurrentPageStartIndex();
        $this->assertEquals(1, $index);

        $pager = new Pager(array("","",""), 2);
        $pager->setCurrentPageNumber(2);
        $index = $pager->getCurrentPageStartIndex();
        $this->assertEquals(3, $index);
    }

    /**
     *
     */
    public function testGetCurrentPageEndIndex()
    {
        $pager = new Pager(array(""));
        $index = $pager->getCurrentPageEndIndex();
        $this->assertEquals(1, $index);

        $pager = new Pager(array("","",""), 2);
        $pager->setCurrentPageNumber(2);
        $index = $pager->getCurrentPageEndIndex();
        $this->assertEquals(3, $index);
    }

    /**
     *
     */
    public function testGetDataCount()
    {
        $pager = new Pager(array(""));
        $this->assertEquals(1, $pager->getDataCount());

        $pager = new Pager(array("", ""));
        $this->assertEquals(2, $pager->getDataCount());
    }

    /**
     *
     */
    public function testGetTotalPageCount()
    {
        $pager = new Pager(array(""));
        $this->assertEquals(1, $pager->getTotalPageCount());

        $pager = new Pager(array("",""));
        $this->assertEquals(1, $pager->getTotalPageCount());

        $pager = new Pager(array("",""), 1);
        $this->assertEquals(2, $pager->getTotalPageCount());
    }

    /**
     *
     */
    public function testIsNextPageExist()
    {
        $pager = new Pager(array(""));
        $this->assertEquals(false, $pager->isNextPageExist());

        $pager = new Pager(array(""), 1);
        $this->assertEquals(false, $pager->isNextPageExist());

        $pager = new Pager(array("", ""), 1);
        $this->assertEquals(true, $pager->isNextPageExist());

        $pager = new Pager(array("", ""), 1);
        $pager->setCurrentPageNumber(2);
        $this->assertEquals(false, $pager->isNextPageExist());
    }

    /**
     *
     */
    public function testIsPrevPageExist()
    {
        $pager = new Pager(array(""));
        $this->assertEquals(false, $pager->isPrevPageExist());

        $pager = new Pager(array(""), 1);
        $this->assertEquals(false, $pager->isPrevPageExist());

        $pager = new Pager(array("", ""), 1);
        $this->assertEquals(false, $pager->isPrevPageExist());

        $pager = new Pager(array("", ""), 1);
        $pager->setCurrentPageNumber(2);
        $this->assertEquals(true, $pager->isPrevPageExist());
    }
}
?>
